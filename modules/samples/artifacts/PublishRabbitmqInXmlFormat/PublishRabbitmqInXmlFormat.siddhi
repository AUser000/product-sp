@App:name("PublishRabbitmqInXmlFormat") 

/*
Purpose:
    This application demonstrates how to configure WSO2 Stream Processor to send sweet production events via RabbitMQ transport in xml format,and view the output on the rabbitmq-consumer.

Prerequisites:
    1) Save this sample. The following message would be shown on the console
        *Siddhi App PublishRabbitmqInXmlFormat successfully deployed. 

Executing the Sample:
    1) Open a terminal and issue command from the {WSO2SPHome}/samples/sample-clients/rabbitmq-consumer and run 'ant' command.
            * If you use the default exchange 'RABBITMQSAMPLE' and uri 'amqp://guest:guest@localhost:5672' in your program use 'ant' command without any arguments.
            *But if you use different exchange name or uri, then run 'ant' command with appropriate arguments.
             eg:ant -Dexchange=rabbitMqtest
    2) Start the Siddhi application by clicking on 'Run'
    3) If the Siddhi application starts successfully, the following messages would be shown on the console
        * PublishRabbitmqInXmlFormat.siddhi - Started Successfully!


Testing the Sample:
    1) To open event simulator by clicking on the second icon or press Ctrl+Shift+I.
    2) In the Single Simulation tab of the panel, select values as follows:
        Siddhi App Name  : PublishRabbitmqInXmlFormat
        Stream Name     : SweetProductiontream
    3) In the name field and amount fields, enter 'toffee', '45.24' respectively and then click Send to send the event. 
    4) Send some more events.



Viewing the Results:
   *See the output in the terminal of {WSO2SPHome}/samples/sample-clients/rabbitmq-consumer.You will get the output as follows:
(sample output for 4 events)

        [java] [org.apache.axiom.om.util.StAXUtils] : XMLStreamReader is org.apache.axiom.util.stax.dialect.SJSXPStreamReaderWrapper
        [java] [org.wso2.siddhi.core.stream.output.sink.LogSink] : PublishRabbitmqInXmlFormatTest : logStream : Event{timestamp=1512448790922, data=[toffee, 9.78], isExpired=false}
        [java] [org.apache.axiom.om.util.StAXUtils] : XMLStreamReader is org.apache.axiom.util.stax.dialect.SJSXPStreamReaderWrapper
        [java] [org.wso2.siddhi.core.stream.output.sink.LogSink] : PublishRabbitmqInXmlFormatTest : logStream : Event{timestamp=1512448813975, data=[lollipop, 12.6], isExpired=false}
        [java] [org.apache.axiom.om.util.StAXUtils] : XMLStreamReader is org.apache.axiom.util.stax.dialect.SJSXPStreamReaderWrapper
        [java] [org.wso2.siddhi.core.stream.output.sink.LogSink] : PublishRabbitmqInXmlFormatTest : logStream : Event{timestamp=1512448830488, data=[Pop, 72.6], isExpired=false}

          
    Notes:
    If you need to edit this application while it is running, stop the application -> Save -> Start.
    If the message "LowProducitonAlertStream' stream could not connect to 'localhost:5672",it could be due to port 5672, defined in the Siddhi application is already being used by a different program. To resolve this issue, please do the following,
            * Stop this Siddhi application (Click 'Run' on menu bar -> 'Stop')
            * Change the port 5672 to an unused port.
            * Start the application and check whether the expected output appear on the console.
    RabbitMq consumer has written according to this example(go through RabbitMQReceiver application).
*/
define stream SweetProductionStream (name string, amount double);

@sink(type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'rabbitMqtest',
@map(type='xml'))
define stream LowProducitonAlertStream (name string, amount double);

from SweetProductionStream
select *
insert into LowProducitonAlertStream;



