@App:name("PublishJmsInKeyvalueFormat")
@App:description('Send events via JMS to the jms-consumer and view the output on the console.')

/*
Purpose:
    This application demonstrates how to configure JMS to receive sweet production events via JMS provider in Keyvalue format using custom mapping,
    map the input events($.item.id) to stream events(name),. and the logpassthrough the events in LowProducitonAlertStream will be output on the output console.

Prerequisites:
    ------------                Getting started with jms                                    ----------------

    1) Download activemq-client-5.x.x.jar (http://central.maven.org/maven2/org/apache/activemq/activemq-client/5.9.0/activemq-client-5.9.0.jar)
    
    2) Download apache-activemq-5.x.x-bin.zip (http://archive.apache.org/dist/activemq/apache-activemq/5.9.0/apache-activemq-5.9.0-bin.zip)
    
    3) Navigate to {WSO2SPHome}/bin and run the following command
     (This will register the InitialContextFactory implementation according to the OSGi JNDI spec.)
     ./icf-provider.(sh|bat) org.apache.activemq.jndi.ActiveMQInitialContextFactory <Downloaded Jar Path> <Output Jar Path>  (Provide privileges if necessary using
     chmod +x icf-provider.(sh|bat) )
     
    4) Copy generated jar from <Output Jar Path> to {WSO2SPHome}/lib

    5) Copy activemq-client-5.x.x.jar to {WSO2SPHome}/samples/sample-clients/lib

    6) Copy following libs in {ActiveMQHome}/lib to {WSO2SPHome}/lib and also to {WSO2SPHome}/samples/sample-clients/lib
    * hawtbuf-1.9.jar
    * geronimo-j2ee-management_1.1_spec-1.0.1.jar
    * geronimo-jms_1.1_spec-1.1.1.jar

    --------------    Working with the Siddhi editor   ------------------------
    
    1) Save this sample.

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'.
    2) If the Siddhi application starts successfully, the following messages would be shown on the console.
        * PublishJmsInKeyvalueFormat.siddhi - Started Successfully!
    3) Navigate to {ActiveMQHome}/bin and start ActiveMQ using ./activemq start

    Notes:
    If you edit this application while it's running, stop the application -> Save -> Start.
    * Stop this Siddhi application (Click 'Run' on menu bar -> 'Stop')
    * Start the application and check whether the specified events from the jms provider appear on the console.

Testing the Sample:
    1) Navigate to {WSO2SPHome}/samples/sample-clients/jms-consumer and run "ant -Dtype='keyvalue" command.
    2) Simulate single events. For this, click on 'Event Simulator' (double arrows on left tab) -> 'Single Simulation' -> Select 'RdbmsSample' as 'Siddhi App Name' -> Select 'SweetProductionStream' as 'Stream Name' -> Provide attribute values -> Send

Viewing the Results:
    See the output as bellow on the jms consumer terminal.

    [java] [org.wso2.siddhi.core.query.processor.stream.LogStreamProcessor] : jms-consumer: Event: , StreamEvent{ timestamp=1513592345676, beforeWindowData=null, onAfterWindowData=null, outputData=[Gingerbread, 12.3], type=CURRENT, next=null}

    Note:
    Stop this Siddhi application, once you are done with the execution.
*/

@sink(type='jms',factory.initial='org.apache.activemq.jndi.ActiveMQInitialContextFactory',
provider.url='tcp://localhost:61616',destination='SP_JMS_TEST',
connection.factory.type='topic',
connection.factory.jndi.name='TopicConnectionFactory',
@map(type='xml'))
define stream SweetProductionStream(name string, amount double);

