@App:name('ReceiveJMSInJsonFormatWithCustomMapping')

@App:description('Receive events via JMS provider in JSON format with custom mapping and view the output on the console.')

/*
Purpose:
    This application demonstrates how to configure JMS to receive sweet production events via JMS provider in JSON format using custom mapping,
    map the input events($.item.id) to stream events(name),. Aand the logpassthrough the events in LowProducitonAlertStream will be output on the output console.

Prerequisites:
    ------------                Getting started with jms                                    ----------------

    1) Download activemq-client-5.x.x.jar (http://central.maven.org/maven2/org/apache/activemq/activemq-client/5.9.0/activemq-client-5.9.0.jar)
    
    2) Download apache-activemq-5.x.x-bin.zip (http://archive.apache.org/dist/activemq/apache-activemq/5.9.0/apache-activemq-5.9.0-bin.zip)
    
    3) Naviagate to {WSO2SPHome}/bin and run the following command
(This will register the InitialContextFactory implementation according to the OSGi JNDI spec.)
     ./icf-provider.(sh|bat) org.apache.activemq.jndi.ActiveMQInitialContextFactory <Downloaded Jar Path> <Output Jar Path>  (Provide privilages if necessary using 
     chmod +x icf-provider.(sh|bat) )
     
    4) Copy generated jar from <Output Jar Path> to {WSO2SPHome}/lib and also to {WSO2SPHome}/samples/sample-clients/lib
    
    5) Copy following libs in {ActiveMQHome}/lib to {WSO2SPHome}/lib and also to {WSO2SPHome}/samples/sample-clients/lib
    * hawtbuf-1.9.jar
    * geronimo-j2ee-management_1.1_spec-1.0.1.jar
    * geronimo-jms_1.1_spec-1.1.1.jar
    
    6) Navigate to {ActiveMQHome}/bin and start ActiveMQ using ./activemq start

    --------------    Working with the Siddhi editor   ------------------------
    
    1) Save this sample.

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'.
    2) If the Siddhi application starts successfully, the following messages would be shown on the console.
        * ReceiveJMSInJsonFormatWithCustomMapping.siddhi - Started Successfully!

    Notes:
    If you edit this application while it's running, stop the application -> Save -> Start.
    * Stop this Siddhi application (Click 'Run' on menu bar -> 'Stop')
    * Start the application and check whether the specified events from the jms provider appear on the console.

Testing the Sample:
    Publish events to the jms endpoint defined by 'receiver.url' in Source configuration. You may publish events with jms-producer in the sample clients.

        Option1: Publish events with jms-producer:
                 Navigate to {WSO2SPHome}/samples/sample-clients/jms-producer and run "ant" command without arguments.

        Option2: Publish events with jms-producer by giving arguments:
                 -DfilePath=$filepath
                 ant -Durl=tcp://localhost:61616 -Ddestination=SP_JMS_TEST -Dtype=json -DfilePath=$filepath -DfactoryType=topic -DjndiName=TopicConnectionFactory -DcustomMapping=true -DnoOfEvents=7 -DeventDefinition="{\"item\": {\"id\": \"{0}\",\"amount\": {1}}}"
                 eg - ant -Durl=tcp://localhost:61616 -Ddestination=SP_JMS_TEST -Dtype=json -DfactoryType=topic -DjndiName=TopicConnectionFactory -DcustomMapping=true -DnoOfEvents=7 -DeventDefinition='{\"item\": {\"id\": \"{0}\",\"amount\": {1}}}'

Viewing the Results:
    See the output on the console. Note how the event produced by client producer are displayed on the console.

    Note:
    Stop this Siddhi application, once you are done with the execution.
*/

@source(type='jms',@map(type='json', @attributes( name = '$.item.id', amount = '$.item.amount')),
factory.initial='org.apache.activemq.jndi.ActiveMQInitialContextFactory',
provider.url='tcp://localhost:61616',destination='SP_JMS_TEST', connection.factory.type='topic', 
connection.factory.jndi.name='TopicConnectionFactory',transport.jms.SubscriptionDurable='true',
transport.jms.DurableSubscriberClientID='wso2SPclient1')
define stream SweetProductionStream(name string, amount double);

from SweetProductionStream#log("Event: ")
insert into IgnoreOutputStream;
