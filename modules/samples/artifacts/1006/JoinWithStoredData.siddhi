/*

Purpose:
    1) To showcase user how to perform join on streaming data with stored data
    2) Introduces user to the store concept and RDBMS

How to setup:
    1) Save this sample as JoinWithStoredData.siddhi
    2) Ensure that MySQL is installed on your machine
    3) Create a database named 'das' in MySQL. This database is referred to with 'jdbc:mysql://localhost:3306/das' url.
    4) Create a table named 'stockTable': CREATE TABLE stockTable (symbol VARCHAR(20), price FLOAT, volume LONG);
    5) Insert some values to the table : INSERT INTO stockTable VALUES ("ABC", 20.7, 50);
    6) Note how we have referred to this RDBMS table in the siddhi app with @store annotation
    7) In the store configuration of this application, replace 'username' and 'password' values with your MySQL credentials
    8) Start the siddhi app by clicking on 'Run' (Click 'Run' on menu bar -> 'Run'). If you edit this application while it's running, stop the app (Click 'Run' on menu bar -> 'Stop') -> Save app -> Start app
    9) Simulate single events. For this, click on 'Event Simulator' (double arrows on left tab) -> 'Single Simulation' -> Provide attribute values -> Send
    10) Send at-least one event with single event simulator, where the symbol matches a symbol value in the data we previously inserted to stockTable. This would satisfy the 'on' condition of our join query
    11) View the output on the console
    12) Stop this siddhi app, once you are done with the execution

*/

@App:name("JoinWithStoredData")

@App:description('JoinWithStoredData siddhi application helps you to understand how to perform join on streaming data with stored data. Furthermore, it describes how we can use RDBMS datasources within Siddhi')

@Store(type="rdbms",
       jdbc.url="jdbc:mysql://localhost:3306/das",
       username="root",
       password="root" ,
       jdbc.driver.name="com.mysql.jdbc.Driver")
@PrimaryKey("symbol")
@Index("volume")
define table stockTable (symbol string, price float, volume long);

define stream inputStream(symbol string, buyer string);

from inputStream as i join stockTable as s
on i.symbol == s.symbol
select i.symbol, i.buyer, s.price, s.volume
insert into tempStream;

from tempStream#log("JoinWithStoredData Output:")
select *
insert into outputStream;











