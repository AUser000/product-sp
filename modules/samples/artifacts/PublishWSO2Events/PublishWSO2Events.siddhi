/*
Purpose:
    This application demonstrates how to use siddhi-io-wso2event for receiving and publishing events.

Prerequisites:

    1) Add relevant siddhi-io-wso2event and siddhi-map-wso2event jars to the {WSO2SPHome}/lib folder if not exist

    2) Navigate to {WSO2SPHome}/samples/sample-clients/wso2event-server and run ant command without arguments

    --------------    Working with the Siddhi editor   ------------------------

    1) Save this sample.

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'.
    2) If the Siddhi application starts successfully, the following messages would be shown on the console.
        * ReceiveAndPublishWSO2Events.siddhi - Started Successfully!

    Notes:
    If you edit this application while it's running, stop the application -> Save -> Start.
    * Stop this Siddhi application (Click 'Run' on menu bar -> 'Stop')

    3) Open single event simulator and choose 'PublishEventsToFile.siddhi' as the siddhi app.

    4) Select SweetProductionStream as input stream.

    5) Send events to SweetProductionStream using simulator.

    6) Processed output events will be logged in the wso2event-server and editor consoles.
*/

@App:name('WSO2EventProcessorSiddhiApp')

define stream SweetProductionStream (name string, amount double);

@sink(type='wso2event', url="tcp://localhost:7612", auth.url="ssl://localhost:7712", protocol="thrift", username="admin",
password="admin", mode="non-blocking", wso2.stream.id='org.wso2.esb.MediatorStatistics:1.0.0', @map(type='wso2event'))
define stream LowProductionAlertStream(name string, hourlyTotal double, currentHour  double);

from SweetProductionStream#window.time(1 min)
select name, sum(amount) as hourlyTotal,
convert(time:extract('HOUR', time:currentTimestamp(), 'yyyy-MM-dd hh:mm:ss'), 'double') as currentHour
insert into LowProductionAlertStream;

from LowProductionAlertStream#log('event')
insert into LogStream;
