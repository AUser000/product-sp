@App:name("ReceiveTCPinJSONFormat")

@App:description('Receive events via TCP transport in JSON format with default mapping and view the output on the console.')

/*
Purpose:
    This application demonstrates how to configure WSO2 Stream Processor to receive sweet production events via TCP transport in JSON format using default mapping and log the  events in LowProducitonAlertStream to the  output  console.

Prerequisites:
    1) Save this sample

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'.
    2) If the Siddhi application starts successfully, the following messages would be shown on the console.
        * Tcp Server started in 0.0.0.0:9892
        * ReceiveTCPinJSONFormat - Started Successfully!

Testing the Sample:
    1) Navigate to {WSO2SPHome}/samples/sample-clients/tcp-client and run the "ant" command without arguments. This would publish events to the TCP server running on port 9892
       If you want to publish custom number of events, you need to run "ant" command as follows
        ant -DnoOfEventsToSend=5


Notes:
    If you edit this application while it's running, stop the application -> Save -> Start.
    If the message "Tcp Server started in 0.0.0.0:9892" does not appear,it could be due to port 9892, defined in the Siddhi application is already being used by a different program. To resolve this issue, please do the following,
        * Stop this Siddhi application (Click 'Run' on menu bar -> 'Stop')
        * Change the port 9892 to an unused port, in this Siddhi application's source configuration.
        * Start the application and check whether the specified messages appear on the console

Viewing the Results:
    See the output. Following messages would be shown on the console.
    [2017-12-12 08:54:10,858]  INFO {org.wso2.siddhi.core.stream.output.sink.LogSink} - ReceiveTCPinJSONFormat : LowProducitonAlertStream : Event{timestamp=1513049050858, data=[Gingerbread, 6664.0], isExpired=false}
    [2017-12-12 08:54:11,858]  INFO {org.wso2.siddhi.core.stream.output.sink.LogSink} - ReceiveTCPinJSONFormat : LowProducitonAlertStream : Event{timestamp=1513049051858, data=[Cream Sandwich, 6190.0], isExpired=false}
    [2017-12-12 08:54:12,859]  INFO {org.wso2.siddhi.core.stream.output.sink.LogSink} - ReceiveTCPinJSONFormat : LowProducitonAlertStream : Event{timestamp=1513049052859, data=[Gingerbread, 9725.0], isExpired=false}
    [2017-12-12 08:54:13,859]  INFO {org.wso2.siddhi.core.stream.output.sink.LogSink} - ReceiveTCPinJSONFormat : LowProducitonAlertStream : Event{timestamp=1513049053859, data=[Donut, 7777.0], isExpired=false}
    [2017-12-12 08:54:14,861]  INFO {org.wso2.siddhi.core.stream.output.sink.LogSink} - ReceiveTCPinJSONFormat : LowProducitonAlertStream : Event{timestamp=1513049054860, data=[Honeycomb, 8818.0], isExpired=false}

Note:
    Stop this Siddhi application, once you are done with the execution

*/

@Source(type = 'tcp', context='SweetProductionStream',
@map(type='json'))
define stream SweetProductionStream (name string, amount double);

@sink(type='log')
define stream LowProducitonAlertStream (name string, amount double);

-- passthrough data in the SweetProductionStream into LowProducitonAlertStream
@info(name='query1')
from SweetProductionStream
select *
insert into LowProducitonAlertStream;