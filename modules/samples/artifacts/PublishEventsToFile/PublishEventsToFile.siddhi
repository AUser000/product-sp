/*
Purpose:
    This application demonstrates how to use siddhi-io-file for publishing events to files.

Prerequisites:

    1) Add relevant siddhi-io-file and siddhi-map-json jars to the {WSO2SPHome}/lib folder if not exist.

    --------------    Working with the Siddhi editor   ------------------------

    1) Edit '{WSO2SPHome}/samples/artifacts/PublishEventsToFile/PublishEventsToFile.siddhi' file by replacing {WSO2SPHome} with the
      absolute path of your WSO2SP home directory.

    2) Save this sample.

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'.
    2) If the Siddhi application starts successfully, the following messages would be shown on the console.
        * PublishEventsToFile.siddhi - Started Successfully!

    Notes:
    If you edit this application while it's running, stop the application -> Save -> Start.
    * Stop this Siddhi application (Click 'Run' on menu bar -> 'Stop')

    3) Open single event simulator and choose 'PublishEventsToFile.siddhi' as the siddhi app.

    4) Select SweetProductionStream as input stream.

    5) Send events to SweetProductionStream using simulator.

    4) Check the directory {WSO2SPHome}/samples/artifacts/PublishEventsToFile/files/sink.

    6) A file should have been created for each event sent from simulator.
*/

@App:name('PublishEventsToFile')

define stream SweetProductionStream (name string, amount double);

@sink(type='file',
file.uri='{WSO2SPHome}/samples/artifacts/PublishEventsToFile/files/sink/{{name}}.txt',
append='false',
@map(type='json'))
define stream LowProductionAlertStream(name string, hourlyTotal double, currentHour  double);

from SweetProductionStream#window.time(1 min)
select name, sum(amount) as hourlyTotal,
convert(time:extract('HOUR', time:currentTimestamp(), 'yyyy-MM-dd hh:mm:ss'), 'double') as currentHour
insert into LowProductionAlertStream;

from LowProductionAlertStream#log('event')
insert into LogStream;
