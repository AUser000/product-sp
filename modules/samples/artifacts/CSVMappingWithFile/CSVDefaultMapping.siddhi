@App:name("CSVDefaultMapping")
@App:description('Publish and receive data events processed within Siddhi to files in CSV default format.')

/*

Purpose:
	This application demonstrates how to configure WSO2 Stream Processor to Publish and receive data events processed within Siddhi to files in CSV default format.
    
Prerequisites:
    * Edit the uri '{WSO2SPHome}/samples/artifacts/CSVMappingWithFile/new/{{name}}.txt' by replacing {WSO2SPHome} with the absolute path of your WSO2SP home directory. You can also change the path after {WSO2SPHome} (/samples/artifacts/CSVMappingWithFile/new/) if you want to publish your event file to a different location.

	* Save this sample. If there is no syntax error, the following messages would be shown on the console:
	     * - CSVDefaultMapping.siddhi successfully deployed.
    
Executing the Sample:
	1) Start the Siddhi application by clicking on 'Run'.
	2) If the Siddhi application starts successfully, the following messages are shown on the console:
            * CSVDefaultMapping.siddhi - Started Successfully!

Testing the Sample:
    You can publish data events to the file through the event simulator:
        1) Click on 'Event Simulator' (double arrows on left tab)
        2) Click 'Single Simulation' (this will be already selected)
        3) Select CSVDefaultMapping as 'Siddhi App Name'
        4) Select InMemoryDefaultSweetProductionInputData as 'StreamName'
        5) Click on the start button (Arrow symbol) next to the newly created simulator
        6) Provide attribute values
            - name: toffees
            - amount: 66.71
        7) Send event
        8) Provide attribute values
            - name: toffees
            - amount: 200.0
        9) Send event

Viewing the Results:
    INFO {org.wso2.siddhi.core.query.processor.stream.LogStreamProcessor} - CSVCustomMapping: event, 
		StreamEvent{ timestamp=1518076126799, beforeWindowData=null, onAfterWindowData=null, outputData=[toffees, 66.71], type=CURRENT, next=null} 
    INFO {org.wso2.siddhi.core.query.processor.stream.LogStreamProcessor} - CSVCustomMapping: event, 
		StreamEvent{ timestamp=1518076126799, beforeWindowData=null, onAfterWindowData=null, outputData=[toffees, 200.0], type=CURRENT, next=null} 
*/

@sink(type='file', file.uri='{WSO2SPHome}/samples/artifacts/CSVMappingWithFile/new/{{name}}.txt' , @map(type='csv'))
define stream InMemoryDefaultSweetProductionInputData (name string, amount double);

@source(type='file', mode='text.full',
dir.uri='file://{WSO2SPHome}/samples/artifacts/CSVMappingWithFile/new/',
action.after.process='move',
tailing='false',
move.after.process='file://{WSO2SPHome}/samples/artifacts/CSVMappingWithFile/files', @map(type='csv'))
define stream UsageStream2 (name string, amount double);

from UsageStream2#window.time(1 min)
select name, amount
insert into LowProductionAlertStream;

from LowProductionAlertStream#log('event')
insert into LogStream;



