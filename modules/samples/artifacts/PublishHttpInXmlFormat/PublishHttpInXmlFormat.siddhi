@App:name("PublishHttpInXmlFormat")

@App:description('Send events via HTTP transport using XML format')

/*

Purpose:
	This application demonstrates how to configure WSO2 Stream Processor to send sweet production events via HTTP transport in XML default format and log the  events in LowProducitonAlertStream to the  output  console.
    
Prerequisites:
	* Save this sample. If there is no syntax error, the following messages would be shown on the console
	     * - Siddhi App PublishHttpInXmlFormat successfully deployed. 
    
Executing the Sample:
	1) Start the Siddhi application by clicking on 'Run'
	2) If the Siddhi application starts successfully, the following messages would be shown on the console
            * PublishHttpInXmlFormat.siddhi - Started Successfully!
            * 'Http' sink at 'LowProducitonAlertStream' stream successfully connected to 'localhost:8080/abc'. 

Testing the Sample:
   * Open a terminal and navigate to {WSO2SPHome}/samples/sample-clients/http-server and run "ant" command without any arguments
    1) You may send events with http server, through event simulator
        a) Open event simulator by clicking on the second icon or press Ctrl+Shift+I.
    	b) In the Single Simulation tab of the panel, select values as follows:
                * Siddhi App Name  : PublishHttpInXmlFormat
                * Stream Name     : SweetProductiontream
        c) In the name field and amount fields, enter 'toffees', '75.6' respectively and then click Send to send the event. 
        d) Send some more events.

	2) Send events to the http endpoint defined by 'publish.url' in Sink configuration. Publish events with curl command
        a) Open a new terminal and issue the following command
            * curl -X POST -d '{"streamName": "SweetProductionStream", "siddhiAppName": "PublishHttpInXmlFormat","data": ['toffees', 75.6]}' http://localhost:9390/simulation/single -H 'content-type: text/plain'
        b) If there is no error, the following messages would be shown on the terminal
            *  {"status":"OK","message":"Single Event simulation started successfully"}
             	    
    3) Publish events with Postman:
        a) Install 'Postman' application from Chrome web store.
        b) Launch the application.
        c) Make a 'Post' request to 'http://localhost:9390/simulation/single' endpoint. Set the Content-Type to 'text/plain' and set the request body in text as follows,
        	{"streamName": "SweetProductionStream", "siddhiAppName": "PublishHttpInXmlFormat","data": ['toffees', 75.6]}
        d) Click 'send'. If there is no error, the following messages would be shown on the console.
                  *  "status": "OK",
                  *  "message": "Single Event simulation started successfully"

Viewing the Results:
    See the output on the terminal
	 


 Notes:
  If the message "LowProducitonAlertStream' stream could not connect to 'localhost:8080",it could be due to port 8080,
  defined in the Siddhi application is already being used by a different program. To resolve this issue, please do the following,
        * Stop this Siddhi application (Click 'Run' on menu bar -> 'Stop')
        * Change the port 8080 to an unused port, in this Siddhi application's source configuration and also change the port number in the http-server file.
        * Start the application and check whether the expected output appear on the console. 
            
*/


define stream SweetProductionStream (name string, amount double);

@sink(type='http', publisher.url='http://localhost:8080/abc',
@map(type='xml'))
define stream LowProducitonAlertStream (name string, amount double);

@info(name='query1') 
from SweetProductionStream
select *
insert into LowProducitonAlertStream;



 





